<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".js" #>

<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="VSLangProj" #>
<#@ assembly name="$(ProjectDir)bin\JsRouting.Core.Dll" #>
<#@ assembly name="$(ProjectDir)bin\StructureMap.Dll" #>

<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>

<#PrepareData(this); #>
<#=GetOutput()#>

<#+        

static DTE Dte;
public static Project Project;
static string AppRoot;
static TextTransformation TT;
static string binLocation;
static Microsoft.CSharp.CSharpCodeProvider codeProvider = new Microsoft.CSharp.CSharpCodeProvider();

	void PrepareData(TextTransformation tt) {

	   TT = tt;

	   var serviceProvider = Host as IServiceProvider;
	   if (serviceProvider != null) 
	   { Dte = serviceProvider.GetService(typeof(SDTE)) as DTE; }

	   if (Dte == null) 
	   { throw new Exception("T4 can only execute through Visual Studio"); }

	   Project = GetProject(Dte);

	   if (Project == null) {
		   Error("Could not find the VS Project containing the T4 file");
		   return;
	   }

	   binLocation = Path.Combine(Path.GetDirectoryName(Project.FullName), "bin");
	}

	Project GetProject(DTE dte) {
	
	   ProjectItem projectItem = dte.Solution.FindProjectItem("web.config");

	   if (projectItem.Document == null)
	   { projectItem.Open(Constants.vsViewKindCode); }

		return projectItem.ContainingProject;
	}

	string GetOutput(){
	
		string[] DoNotScan = { "JsRouting.", "StructureMap.dll" };

		// get a stream of assemblies that could contain routes, constraints, etc
		var assemblies =	from fileLocation in Directory.EnumerateFiles(binLocation)
							where fileLocation.EndsWith(".dll")
							let fileName = Path.GetFileName(fileLocation)
							where !DoNotScan.Any(fileName.Contains) // HACK to not scan StrucuteMap and the JsRouting DLLs
							select fileLocation;
							
		var outputJs = JsRouting.Core.Output.ManagerJs + JsRouting.Core.AssemblyLoader.Load(assemblies).GetInstance<JsRouting.Core.Output>().ToJavaScript();

		return outputJs;
	}

#>